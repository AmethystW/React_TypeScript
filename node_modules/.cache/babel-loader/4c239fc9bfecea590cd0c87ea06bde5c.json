{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\51651\\\\Desktop\\\\ReactTypescript\\\\demo\\\\src\\\\components\\\\submit.tsx\";\nimport React from 'react';\nexport default class Submit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      fdir: []\n    };\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  clickHandler() {\n    //fetch方法\n    var file = document.getElementById(\"fileinput\").files;\n    var formData = new FormData(); //创建表单数据对象\n\n    if (file !== null && file.length !== 0) {\n      formData.append('file', file[0]); //将文件添加到表单对象中\n\n      console.log(file[0]);\n    }\n\n    fetch(this.props.url, {\n      //传输\n      method: \"post\",\n      body: formData,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(d => {\n      // var percent = (d.loaded / d.total) * 100;\n      // let progress = document.getElementById(\"progressBar\") as HTMLProgressElement\n      // console.log(percent);\n      // progress.max = 100;\n      // progress.value = percent;\n      // progress.textContent = percent+'%';\n      // console.log('result is',d);\n      console.log(\"上传中\");\n    }); // var xhr = new XMLHttpRequest()\n    // var oloaded:any\n    // var ot:any\n    // var fileObj = (document.getElementById(\"fileinput\") as HTMLInputElement).value // js 获取文件对象\n    // var url = this.props.url  // 接收上传文件的服务器地址！！！\n    // var form = new FormData(); // FormData 对象\n    // form.append(\"file\", fileObj); // 文件对象\n    // xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\n    // xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\n    // xhr.onload = uploadComplete; //请求完成\n    // xhr.onerror =  uploadFailed; //请求失败\n    // xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\n    // xhr.upload.onloadstart = function(){//上传开始执行方法\n    //     ot = new Date().getTime();   //设置上传开始时间\n    //     oloaded = 0;//设置上传开始时，以上传的文件大小为0\n    // };\n    // xhr.send(form); //开始上传，发送form数据\n    // //上传成功响应\n    // function uploadComplete(evt:any) {\n    //     //服务断接收完文件返回的结果\n    //     var data = JSON.parse(evt.target.responseText);\n    //     if(data.success) {\n    //         alert(\"上传成功！\");\n    //     }else{\n    //         alert(\"上传失败！\");\n    //     }\n    // }\n    // //上传失败\n    // function uploadFailed(evt:any) {\n    //     alert(\"上传失败！\");\n    // }\n    // //上传进度实现方法，上传过程中会频繁调用该方法\n    // function progressFunction(evt:any) {\n    //     var progressBar = document.getElementById(\"progressBar\") as HTMLProgressElement;\n    //     var percentageDiv = document.getElementById(\"percentage\") as HTMLSpanElement;\n    //     // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\n    //     if (evt.lengthComputable) {//\n    //         progressBar.max = evt.total;\n    //         progressBar.value = evt.loaded;\n    //         percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\n    //     }\n    //     var time = document.getElementById(\"time\") as HTMLSpanElement;\n    //     var nt = new Date().getTime();//获取当前时间\n    //     var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\n    //     ot = new Date().getTime(); //重新赋值时间，用于下次计算\n    //     var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\n    //     oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\n    //     //上传速度计算\n    //     var speed = perload/pertime;//单位b/s\n    //     var bspeed = speed;\n    //     var units = 'b/s';//单位名称\n    //     if(speed/1024>1){\n    //         speed = speed/1024;\n    //         units = 'k/s';\n    //     }\n    //     if(speed/1024>1){\n    //         speed = speed/1024;\n    //         units = 'M/s';\n    //     }\n    //     speed = Number(speed.toFixed(1));\n    //     //剩余时间\n    //     var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\n    //     time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\n    //     if(bspeed===0) time.innerHTML = '上传已取消';\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      action: \"http://127.0.0.1:8080\",\n      method: \"post\",\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"fileinput\",\n      name: \"file\",\n      type: \"file\",\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"\\u4E0A\\u4F20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\\u8FDB\\u5EA6\\uFF1A\"), React.createElement(\"progress\", {\n      id: \"progressBar\",\n      value: \"0\",\n      max: \"100\",\n      style: {\n        width: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/51651/Desktop/ReactTypescript/demo/src/components/submit.tsx"],"names":["React","Submit","Component","constructor","props","state","count","fdir","clickHandler","bind","file","document","getElementById","files","formData","FormData","length","append","console","log","fetch","url","method","body","headers","then","d","render","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\ninterface Istate{\r\n    count:number\r\n    fdir:string[]\r\n}\r\n\r\ninterface Iprops{\r\n    url:string\r\n}\r\n\r\nexport default class Submit extends React.Component<Iprops,Istate>{\r\n    public constructor(props:any) {\r\n      super(props);\r\n      this.clickHandler = this.clickHandler.bind(this);\r\n    }\r\n    \r\n    public state:Readonly<Istate>={\r\n        count:0,\r\n        fdir:[]\r\n    }\r\n\r\n    public clickHandler(){\r\n        //fetch方法\r\n        var file =(document.getElementById(\"fileinput\") as HTMLInputElement).files\r\n        var formData = new FormData(); //创建表单数据对象\r\n        if(file !== null && file.length !== 0){\r\n            formData.append('file',file[0]); //将文件添加到表单对象中\r\n            console.log(file[0]);\r\n        }\r\n        \r\n        fetch(this.props.url,{       //传输\r\n            method :\"post\",\r\n            body: formData,\r\n            headers:{\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }) \r\n        .then((d:any)=>{\r\n            // var percent = (d.loaded / d.total) * 100;\r\n            // let progress = document.getElementById(\"progressBar\") as HTMLProgressElement\r\n            // console.log(percent);\r\n            // progress.max = 100;\r\n            // progress.value = percent;\r\n            // progress.textContent = percent+'%';\r\n            // console.log('result is',d);\r\n            console.log(\"上传中\");        \r\n        })\r\n\r\n        \r\n        // var xhr = new XMLHttpRequest()\r\n        // var oloaded:any\r\n        // var ot:any\r\n\r\n        // var fileObj = (document.getElementById(\"fileinput\") as HTMLInputElement).value // js 获取文件对象\r\n        // var url = this.props.url  // 接收上传文件的服务器地址！！！\r\n\r\n        // var form = new FormData(); // FormData 对象\r\n        // form.append(\"file\", fileObj); // 文件对象\r\n\r\n        // xhr = new XMLHttpRequest();  // XMLHttpRequest 对象\r\n        \r\n        // xhr.open(\"post\", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。\r\n        // xhr.onload = uploadComplete; //请求完成\r\n        // xhr.onerror =  uploadFailed; //请求失败\r\n\r\n        // xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】\r\n        // xhr.upload.onloadstart = function(){//上传开始执行方法\r\n        //     ot = new Date().getTime();   //设置上传开始时间\r\n        //     oloaded = 0;//设置上传开始时，以上传的文件大小为0\r\n        // };\r\n\r\n        // xhr.send(form); //开始上传，发送form数据\r\n\r\n        // //上传成功响应\r\n        // function uploadComplete(evt:any) {\r\n        //     //服务断接收完文件返回的结果\r\n        //     var data = JSON.parse(evt.target.responseText);\r\n        //     if(data.success) {\r\n        //         alert(\"上传成功！\");\r\n        //     }else{\r\n        //         alert(\"上传失败！\");\r\n        //     }\r\n\r\n        // }\r\n        // //上传失败\r\n        // function uploadFailed(evt:any) {\r\n        //     alert(\"上传失败！\");\r\n        // }\r\n\r\n        // //上传进度实现方法，上传过程中会频繁调用该方法\r\n        // function progressFunction(evt:any) {\r\n        //     var progressBar = document.getElementById(\"progressBar\") as HTMLProgressElement;\r\n        //     var percentageDiv = document.getElementById(\"percentage\") as HTMLSpanElement;\r\n        //     // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0\r\n        //     if (evt.lengthComputable) {//\r\n        //         progressBar.max = evt.total;\r\n        //         progressBar.value = evt.loaded;\r\n        //         percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + \"%\";\r\n        //     }\r\n        //     var time = document.getElementById(\"time\") as HTMLSpanElement;\r\n        //     var nt = new Date().getTime();//获取当前时间\r\n        //     var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s\r\n        //     ot = new Date().getTime(); //重新赋值时间，用于下次计算\r\n        //     var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b\r\n        //     oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算\r\n        //     //上传速度计算\r\n        //     var speed = perload/pertime;//单位b/s\r\n        //     var bspeed = speed;\r\n        //     var units = 'b/s';//单位名称\r\n        //     if(speed/1024>1){\r\n        //         speed = speed/1024;\r\n        //         units = 'k/s';\r\n        //     }\r\n        //     if(speed/1024>1){\r\n        //         speed = speed/1024;\r\n        //         units = 'M/s';\r\n        //     }\r\n        //     speed = Number(speed.toFixed(1));\r\n        //     //剩余时间\r\n        //     var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);\r\n        //     time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';\r\n        //     if(bspeed===0) time.innerHTML = '上传已取消';\r\n        // }\r\n    }\r\n    \r\n    public render() {\r\n      return (\r\n        <div>\r\n            <div>\r\n                <form action=\"http://127.0.0.1:8080\" method=\"post\" encType=\"multipart/form-data\">\r\n                    <input id=\"fileinput\" name=\"file\" type=\"file\" multiple={true}/>\r\n                    <input type=\"button\" value=\"上传\"/>\r\n                </form>\r\n            </div>\r\n            <div>\r\n                <label >上传进度：</label>\r\n                <progress id=\"progressBar\" value=\"0\" max=\"100\" style={{width:300}}></progress>\r\n                {/* <span id=\"percentage\"></span><span id=\"time\"></span>  */}\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}